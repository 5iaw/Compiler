%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void yyerror(const char *s);
int yylex(void);

int yylineno;
int yylex_destroy(void);

typedef struct {
    char *name;
    int value;
} symbol;

#define MAX_SYMBOLS 100
#define UNDECLARED_IDENTIFIER_ERROR -999999

symbol symbol_table[MAX_SYMBOLS];
int symbol_count = 0;
int error_flag = 0; // Global error flag

int lookup_symbol(const char *name) {
    for (int i = 0; i < symbol_count; i++) {
        if (strcmp(symbol_table[i].name, name) == 0) {
            return symbol_table[i].value;
        }
    }
    yyerror("undeclared identifier");
    error_flag = 1; // Set error flag
    return UNDECLARED_IDENTIFIER_ERROR;
}

void update_symbol(const char *name, int value) {
    for (int i = 0; i < symbol_count; i++) {
        if (strcmp(symbol_table[i].name, name) == 0) {
            symbol_table[i].value = value;
            return;
        }
    }
    symbol_table[symbol_count].name = strdup(name);
    symbol_table[symbol_count].value = value;
    symbol_count++;
}

%}

%union {
    int ival;
    char *sval;
}

%token T_BEGIN T_END T_PRINT T_INT T_IF T_ELSE T_PROGRAM
%token <ival> T_NUMBER
%token <sval> T_IDENTIFIER T_STRING
%token T_PLUS T_MINUS T_TIMES T_DIVIDE T_ASSIGN T_SEMICOLON T_COMMA T_LPAREN T_RPAREN
%token T_EQ T_NEQ T_LEQ T_GEQ

%type <ival> expression
%type <sval> declaration declarations assignment print if_statement block statement
%type <sval> program

%type <sval> empty
%type <sval> statements

%left T_PLUS T_MINUS
%left T_TIMES T_DIVIDE
%left T_EQ T_NEQ T_LEQ T_GEQ '>' '<'

%%

program:
    T_PROGRAM T_IDENTIFIER T_BEGIN statements T_END {
        if (!error_flag) printf("Program parsed successfully.\n");
    }
;

statements:
    empty
    | statements statement
;

statement:
    declaration T_SEMICOLON
    | assignment T_SEMICOLON
    | print
    | if_statement
;

declaration:
    T_INT declarations { if (!error_flag) printf("Declare variables\n"); }
;

declarations:
    T_IDENTIFIER { update_symbol($1, 0); }
    | T_IDENTIFIER T_ASSIGN expression { update_symbol($1, $3); }
    | declarations T_COMMA T_IDENTIFIER { update_symbol($3, 0); }
    | declarations T_COMMA T_IDENTIFIER T_ASSIGN expression { update_symbol($3, $5); }
;

assignment:
    T_IDENTIFIER T_ASSIGN expression {
        if (!error_flag) {
            if ($3 == UNDECLARED_IDENTIFIER_ERROR) {
                yyerror("assignment to undeclared identifier");
                error_flag = 1;
            } else {
                printf("Assign %d to %s\n", $3, $1);
                update_symbol($1, $3);
            }
        }
    }
;

print:
    T_PRINT T_LPAREN expression T_RPAREN T_SEMICOLON {
        if (!error_flag) {
            if ($3 == UNDECLARED_IDENTIFIER_ERROR) {
                yyerror("print of undeclared identifier");
                error_flag = 1;
            } else {
                printf("Print value %d\n", $3);
            }
        }
    }
    | T_PRINT T_LPAREN T_STRING T_RPAREN T_SEMICOLON { if (!error_flag) printf("Print message %s\n", $3); }
;

if_statement:
    T_IF T_LPAREN expression T_RPAREN block {
        if (!error_flag) {
            if ($3 == UNDECLARED_IDENTIFIER_ERROR) {
                yyerror("if condition with undeclared identifier");
                error_flag = 1;
            } else {
                printf("If condition\n");
            }
        }
    }
    | T_IF T_LPAREN expression T_RPAREN block T_ELSE block {
        if (!error_flag) {
            if ($3 == UNDECLARED_IDENTIFIER_ERROR) {
                yyerror("if-else condition with undeclared identifier");
                error_flag = 1;
            } else {
                printf("If-Else condition\n");
            }
        }
    }
;

block:
    T_BEGIN statements T_END
;

expression:
    T_NUMBER { $$ = $1; }
    | T_IDENTIFIER {
        if (!error_flag) {
            int val = lookup_symbol($1);
            if (val == UNDECLARED_IDENTIFIER_ERROR) {
                $$ = UNDECLARED_IDENTIFIER_ERROR;
                error_flag = 1;
            } else {
                $$ = val;
            }
        } else {
            $$ = UNDECLARED_IDENTIFIER_ERROR;
        }
    }
    | expression T_PLUS expression { $$ = ($1 == UNDECLARED_IDENTIFIER_ERROR || $3 == UNDECLARED_IDENTIFIER_ERROR) ? UNDECLARED_IDENTIFIER_ERROR : $1 + $3; }
    | expression T_MINUS expression { $$ = ($1 == UNDECLARED_IDENTIFIER_ERROR || $3 == UNDECLARED_IDENTIFIER_ERROR) ? UNDECLARED_IDENTIFIER_ERROR : $1 - $3; }
    | expression T_TIMES expression { $$ = ($1 == UNDECLARED_IDENTIFIER_ERROR || $3 == UNDECLARED_IDENTIFIER_ERROR) ? UNDECLARED_IDENTIFIER_ERROR : $1 * $3; }
    | expression T_DIVIDE expression { $$ = ($1 == UNDECLARED_IDENTIFIER_ERROR || $3 == UNDECLARED_IDENTIFIER_ERROR) ? UNDECLARED_IDENTIFIER_ERROR : $1 / $3; }
    | expression '>' expression { $$ = ($1 == UNDECLARED_IDENTIFIER_ERROR || $3 == UNDECLARED_IDENTIFIER_ERROR) ? UNDECLARED_IDENTIFIER_ERROR : $1 > $3; }
    | expression '<' expression { $$ = ($1 == UNDECLARED_IDENTIFIER_ERROR || $3 == UNDECLARED_IDENTIFIER_ERROR) ? UNDECLARED_IDENTIFIER_ERROR : $1 < $3; }
    | expression T_EQ expression { $$ = ($1 == UNDECLARED_IDENTIFIER_ERROR || $3 == UNDECLARED_IDENTIFIER_ERROR) ? UNDECLARED_IDENTIFIER_ERROR : $1 == $3; }
    | expression T_NEQ expression { $$ = ($1 == UNDECLARED_IDENTIFIER_ERROR || $3 == UNDECLARED_IDENTIFIER_ERROR) ? UNDECLARED_IDENTIFIER_ERROR : $1 != $3; }
    | expression T_LEQ expression { $$ = ($1 == UNDECLARED_IDENTIFIER_ERROR || $3 == UNDECLARED_IDENTIFIER_ERROR) ? UNDECLARED_IDENTIFIER_ERROR : $1 <= $3; }
    | expression T_GEQ expression { $$ = ($1 == UNDECLARED_IDENTIFIER_ERROR || $3 == UNDECLARED_IDENTIFIER_ERROR) ? UNDECLARED_IDENTIFIER_ERROR : $1 >= $3; }
    | T_LPAREN expression T_RPAREN { $$ = $2; }
;

empty:
    { $$ = NULL; }
;

%%
void yyerror(const char *s) {
    fprintf(stderr, "Error: %s at line %d\n", s, yylineno);
}

int main(int argc, char **argv) {
    yyparse();
    yylex_destroy();
    return 0;
}
